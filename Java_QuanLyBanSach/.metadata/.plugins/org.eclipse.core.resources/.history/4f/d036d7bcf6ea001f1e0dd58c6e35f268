package vn.DA_KNNN.Controller;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import vn.DA_KNNN.Model.DataProvider;
import vn.DA_KNNN.View.CustomerView;

public class CustomerController {
	private CustomerView view;
	private String query = "SELECT `CustomerId` as 'M√£ Kh√°ch H√†ng', `FirstName` as 'T√™n', `LastName` as 'H·ªç', `PhoneNumber`, `Address` as 'ƒê·ªãa Ch·ªâ', "
			+ "`BirthDate` as 'Ng√†y Sinh', `Point` as 'ƒêi·ªÉm' FROM `customer`";

	public CustomerController(CustomerView _view) {
		this.view = _view;

		reloadData(query);
		setupEventListeners();
	}

	private void reloadData(String sql) {
		DefaultTableModel model = loadDataTable(sql);
		view.setData(model);
		tableRowClick(view.getTable(), model);
	}

	private void setupEventListeners() {
		view.getBtnAdd().addActionListener(e -> addCustomer());
		view.getBtnEdit().addActionListener(e -> editCustomer());
		view.getBtnDelete().addActionListener(e -> deleteCustomer());
		view.getBtnCreateId().addActionListener(e -> createCustomerId());
		view.getBtnFind().addActionListener(e -> findCustomerData());
	}

	private void addCustomer() {
		String id = view.getTxtCustomerId().getText().trim();
		String firstName = view.getTxtFirstName().getText().trim();
		String lastName = view.getTxtLastName().getText().trim();
		String birthDate = view.getTxtBirthDate().getText().trim();
		String phoneNumber = view.getTxtPhoneNumber().getText().trim();
		String address = view.getTxtAddress().getText().trim();

		// Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
		if (id.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || phoneNumber.isEmpty() || address.isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin kh√°ch h√†ng!", "Th√¥ng b√°o",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		String sql = String.format(
				"INSERT INTO customer (CustomerId, FirstName, LastName, BirthDate, PhoneNumber, Address) "
						+ "VALUES ('%s', '%s', '%s', '%s', '%s', '%s')",
				id, firstName, lastName, birthDate, phoneNumber, address);

		if (DataProvider.getInstance().insert(sql)) {
			JOptionPane.showMessageDialog(view, "Th√™m kh√°ch h√†ng th√†nh c√¥ng!", "Th√¥ng b√°o",
					JOptionPane.INFORMATION_MESSAGE);
			reloadData(query);
			clearFields();
		} else {
			JOptionPane.showMessageDialog(view, "Th√™m kh√°ch h√†ng th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void editCustomer() {
		String id = view.getTxtCustomerId().getText().trim();
		String firstName = view.getTxtFirstName().getText().trim();
		String lastName = view.getTxtLastName().getText().trim();
		String birthDate = view.getTxtBirthDate().getText().trim();
		String phoneNumber = view.getTxtPhoneNumber().getText().trim();
		String address = view.getTxtAddress().getText().trim();

		if (id.isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng ch·ªçn kh√°ch h√†ng c·∫ßn ch·ªânh s·ª≠a!", "C·∫£nh b√°o",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng n√†y?",
				"X√°c nh·∫≠n ch·ªânh s·ª≠a", JOptionPane.YES_NO_OPTION);
		if (confirm != JOptionPane.YES_OPTION)
			return;

		String sql = String.format(
				"UPDATE customer SET FirstName='%s', LastName='%s', BirthDate='%s', PhoneNumber='%s', Address='%s' WHERE CustomerId='%s'",
				firstName, lastName, birthDate, phoneNumber, address, id);

		if (DataProvider.getInstance().update(sql)) {
			JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng th√†nh c√¥ng!", "Th√¥ng b√°o",
					JOptionPane.INFORMATION_MESSAGE);
			reloadData(query);
			clearFields();
		} else {
			JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void deleteCustomer() {
		String id = view.getTxtCustomerId().getText().trim();

		if (id.isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng ch·ªçn kh√°ch h√†ng c·∫ßn x√≥a!", "C·∫£nh b√°o",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch h√†ng n√†y?", "X√°c nh·∫≠n x√≥a",
				JOptionPane.YES_NO_OPTION);
		if (confirm != JOptionPane.YES_OPTION)
			return;

		String sql = String.format("DELETE FROM customer WHERE CustomerId='%s'", id);

		if (DataProvider.getInstance().delete(sql)) {
			JOptionPane.showMessageDialog(view, "X√≥a kh√°ch h√†ng th√†nh c√¥ng!", "Th√¥ng b√°o",
					JOptionPane.INFORMATION_MESSAGE);
			reloadData(query);
			clearFields();
		} else {
			JOptionPane.showMessageDialog(view, "X√≥a kh√°ch h√†ng th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	/** üîπ H√†m d√πng chung ƒë·ªÉ l·∫•y gi√° tr·ªã duy nh·∫•t */
	private String fetchSingleValue(String sql, String columnName) {
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			if (rs.next()) {
				return rs.getString(columnName);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return "";
	}

	private void createCustomerId() {
		// TODO Auto-generated method stub
		String nextId = fetchSingleValue("SELECT MAX(CustomerId) + 1 FROM Customer", "MAX(CustomerId) + 1");
		view.getTxtCustomerId().setText(nextId);
	}

	private void findCustomerData() {
		// TODO Auto-generated method stub
		String id = view.getTxtFind().getText();
		String name = view.getTxtFind().getText();

		boolean isNumeric = id.matches("\\d+"); // Ki·ªÉm tra xem id ch·ªâ ch·ª©a s·ªë hay kh√¥ng

		String sql;
		if (isNumeric) {
			// Ki·ªÉm tra n·∫øu id l√† s·ªë, t√¨m theo EmployeeId
			sql = query + " WHERE CustomerId = " + id + " OR FirstName LIKE '%" + name + "%' OR LastName LIKE '%" + name
					+ "%'";
		} else {
			// N·∫øu id kh√¥ng ph·∫£i l√† s·ªë, t√¨m theo FirstName ho·∫∑c LastName
			sql = query + " WHERE FirstName LIKE '%" + name + "%' OR LastName LIKE '%" + name + "%'";
		}

		reloadData(sql);

		view.setData(loadDataTable(sql));
		System.out.println(sql);
	}

	private DefaultTableModel loadDataTable(String sql) {
		DefaultTableModel model = new DefaultTableModel();
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			String[] columns = { "M√£ th·ªÉ lo·∫°i", "T√™n th·ªÉ lo·∫°i", "M√¥ t·∫£" };

			if (rs == null) {
				return new DefaultTableModel(columns, 0);
			}

			ResultSetMetaData meta = rs.getMetaData();
			int columnCount = meta.getColumnCount();
			// ‚úÖ Kh·ªüi t·∫°o v√† l·∫•y t√™n c·ªôt t·ª´ metadata
			String[] columnNames = new String[columnCount];
			for (int i = 1; i <= columnCount; i++) {
				columnNames[i - 1] = meta.getColumnLabel(i);
			}
			model.setColumnIdentifiers(columnNames); // G√°n t√™n c·ªôt cho b·∫£ng

			// ‚úÖ L·∫∑p qua t·ª´ng d√≤ng d·ªØ li·ªáu v√† th√™m v√†o b·∫£ng
			while (rs.next()) {
				Object[] rowData = new Object[columnCount];
				for (int i = 1; i <= columnCount; i++) {
					rowData[i - 1] = rs.getObject(i);
				}
				model.addRow(rowData);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return model;
	}

	private void tableRowClick(JTable table, DefaultTableModel model) {
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int selectedRow = table.getSelectedRow();
				if (selectedRow != -1) { // Ki·ªÉm tra c√≥ h√†ng n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng
					view.getTxtCustomerId().setText(model.getValueAt(selectedRow, 0).toString());
					view.getTxtFirstName().setText(model.getValueAt(selectedRow, 1).toString());
					view.getTxtLastName().setText(model.getValueAt(selectedRow, 2).toString());
					view.getTxtPhoneNumber().setText(model.getValueAt(selectedRow, 3).toString());
					view.getTxtAddress().setText(model.getValueAt(selectedRow, 4).toString());
					view.getTxtBirthDate().setText(model.getValueAt(selectedRow, 5).toString());
				}
			}
		});
	}

	private void clearFields() {
		view.getTxtCustomerId().setText("");
		view.getTxtFirstName().setText("");
		view.getTxtLastName().setText("");
		view.getTxtBirthDate().setText("");
		view.getTxtPhoneNumber().setText("");
		view.getTxtAddress().setText("");
	}

}
