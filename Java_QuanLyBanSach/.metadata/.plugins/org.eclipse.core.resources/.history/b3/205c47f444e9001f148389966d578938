package vn.DA_KNNN.Controller;

import vn.DA_KNNN.Model.DataProvider;
import vn.DA_KNNN.View.BookView;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class BookController {
	private final BookView view;
	private String query = "SELECT book.BookId as 'M√£ S√°ch', book.Title as 'T√™n s√°ch', author.Name AS 'T√°c gi·∫£', publisher.PublisherName AS 'Nh√† Xu·∫•t b·∫£n', category.CategoryName as 'Th·ªÉ lo·∫°i', "
			+ "book.PublicationDate as 'NƒÉm xu·∫•t b·∫£n', book.PurchasePrice as 'Gi√° nh·∫≠p', book.Price as 'Gi√° b√°n', book.Quantity as 'S·ªë l∆∞·ª£ng', book.EntryDate as 'Ng√†y nh·∫≠p' "
			+ "FROM book " + "JOIN category ON book.CategoryId = category.CategoryId "
			+ "JOIN publisher ON book.PublisherId = publisher.PublisherId "
			+ "JOIN author ON author.AuthorId = book.AuthorId";

	public BookController(BookView _view) {
		this.view = _view;
		setupEventListeners();
		loadComboBoxData();
		tableRowClick(view.getTable(), loadBookData(query));
		view.setData(loadBookData(query));
	}

	private void reloadData(String sql) {
		DefaultTableModel model = loadBookData(sql);
		tableRowClick(view.getTable(), model);
		view.setData(model);
	}

	/** üîπ Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán cho c√°c n√∫t */
	private void setupEventListeners() {
		view.getBtnAdd().addActionListener(e -> addBook());
		view.getBtnEdit().addActionListener(e -> editBook());
		view.getBtnDelete().addActionListener(e -> deleteBook());
		view.getBtnCreateId().addActionListener(e -> createBookId());
		view.getBtnFind().addActionListener(e -> findBookData());
	}

	/** üîπ Load d·ªØ li·ªáu th·ªÉ lo·∫°i & nh√† xu·∫•t b·∫£n v√†o combobox */
	private void loadComboBoxData() {
		view.setCategories(loadCategories());
		view.setPublisher(loadPublishers());
	}

	/** ‚úÖ Load d·ªØ li·ªáu s√°ch v√†o b·∫£ng */
	private DefaultTableModel loadBookData(String sql) {

		DefaultTableModel model = new DefaultTableModel();

		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			String[] columns = { "M√£ s√°ch", "T√™n s√°ch", "T√°c gi·∫£", "Nh√† xu·∫•t b·∫£n", "NƒÉm xu·∫•t b·∫£n", "Th·ªÉ lo·∫°i",
					"Gi√° nh·∫≠p", "Gi√° b√°n", "S·ªë l∆∞·ª£ng", "Ng√†y Nh·∫≠p" };

			if (rs == null) {
				return new DefaultTableModel(columns, 0); // G√°n t√™n c·ªôt cho b·∫£ng;
			}

			ResultSetMetaData meta = rs.getMetaData();
			int columnCount = meta.getColumnCount();
			// ‚úÖ Kh·ªüi t·∫°o v√† l·∫•y t√™n c·ªôt t·ª´ metadata
			String[] columnNames = new String[columnCount];
			for (int i = 1; i <= columnCount; i++) {
				columnNames[i - 1] = meta.getColumnLabel(i);
			}
			model.setColumnIdentifiers(columnNames); // G√°n t√™n c·ªôt cho b·∫£ng

			// ‚úÖ L·∫∑p qua t·ª´ng d√≤ng d·ªØ li·ªáu v√† th√™m v√†o b·∫£ng
			while (rs.next()) {
				Object[] rowData = new Object[columnCount];
				for (int i = 1; i <= columnCount; i++) {
					rowData[i - 1] = rs.getObject(i);
				}
				model.addRow(rowData);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return model;
	}

	/** ‚úÖ Load danh s√°ch th·ªÉ lo·∫°i */
	private String[] loadCategories() {
		return fetchColumnData("SELECT CategoryName FROM category", "CategoryName");
	}

	/** ‚úÖ Load danh s√°ch nh√† xu·∫•t b·∫£n */
	private String[] loadPublishers() {
		return fetchColumnData("SELECT PublisherName FROM publisher", "PublisherName");
	}

	/** üîπ H√†m d√πng chung ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ m·ªôt c·ªôt */
	private String[] fetchColumnData(String sql, String columnName) {
		List<String> dataList = new ArrayList<>();
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			while (rs.next()) {
				dataList.add(rs.getString(columnName));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return dataList.toArray(new String[0]);
	}

	/** ‚úÖ L·∫•y ID c·ªßa th·ªÉ lo·∫°i */
	private String getCategoryId(JComboBox<String> comboBox) {
		return fetchSingleValue(
				"SELECT CategoryId FROM category WHERE CategoryName = '" + comboBox.getSelectedItem().toString() + "'",
				"CategoryId");
	}

	/** ‚úÖ L·∫•y ID c·ªßa nh√† xu·∫•t b·∫£n */
	private String getPublisherId(String publisherName) {
		return fetchSingleValue("SELECT PublisherId FROM publisher WHERE PublisherName = '" + publisherName + "'",
				"PublisherId");
	}

	private String getAuthorId(String authorName) {
		String sql = String.format("SELECT `AuthorId` FROM `author` WHERE `Name` = '%s'", authorName);
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			if (rs == null)
				return "";
			if (rs.next()) {
				return rs.getString(1);
			}
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return "";
	}

	/** ‚úÖ Th√™m s√°ch v√†o c∆° s·ªü d·ªØ li·ªáu */
	private void addBook() {
		try {
			// L·∫•y d·ªØ li·ªáu t·ª´ giao di·ªán
			String bookId = view.getTxtBookId().getText();
			String title = view.getTxtBookName().getText();
			String entryDate = view.getTxtEntryDate().getText();
			String quantity = view.getTxtQuantity().getText();
			String publicationDate = view.getTxtPublicationYear().getText();
			String price = view.getTxtPrice().getText();
			String purchasePrice = view.getTxtPurchasePrice().getText();
			String publisherId = getPublisherId(view.getCmbPublisher().getSelectedItem().toString());
			String categoryId = getCategoryId(view.getCmbCategory());
			String authorId = getAuthorId(view.getTxtAuthor().getText());

			if (authorId.isEmpty()) {
				JOptionPane.showMessageDialog(view, "Vui l√≤ng ki·ªÉm tra t√™n t√°c gi·∫£ ho·∫∑c kh√¥ng c√≥ t√°c gi·∫£ n√†y!", "L·ªói",
						JOptionPane.ERROR_MESSAGE);
			}
			// Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o
			if (bookId.isEmpty() || title.isEmpty() || entryDate.isEmpty() || publisherId.isEmpty()
					|| publicationDate.isEmpty() || quantity.isEmpty() || authorId.isEmpty() || price.isEmpty()
					|| purchasePrice.isEmpty() || categoryId.isEmpty()) {
				JOptionPane.showMessageDialog(view, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", "L·ªói",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			// Th√™m s√°ch v√†o b·∫£ng book
			String sql = "INSERT INTO book (BookId, Title, PublisherId, CategoryId, PublicationDate, Price, AuthorId, EntryDate, PurchasePrice, Quantity) "
					+ "VALUES ('" + bookId + "', '" + title + "', '" + publisherId + "', '" + categoryId + "', '"
					+ publicationDate + "', " + "'" + price + "', '" + authorId + "', '" + entryDate + "', '"
					+ purchasePrice + "', '" + quantity + "')";

			if (DataProvider.getInstance().insert(sql)) {
				JOptionPane.showMessageDialog(view, "Ch√®n th√†nh c√¥ng!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
				reloadData(sql);
				clearFields();
			} else {
				JOptionPane.showMessageDialog(view, "Ch√®n kh√¥ng th√†nh c√¥ng!", "L·ªói", JOptionPane.ERROR_MESSAGE);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(view, "ƒê√£ x·∫£y ra l·ªói: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	/** ‚úÖ Ch·ªânh s·ª≠a s√°ch */
	private void editBook() {
		// Ki·ªÉm tra n·∫øu m√£ s√°ch r·ªóng
		if (view.getTxtBookId().getText().isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng nh·∫≠p m√£ s√°ch c·∫ßn ch·ªânh s·ª≠a!", "Th√¥ng b√°o",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·ªânh s·ª≠a s√°ch n√†y?",
				"X√°c nh·∫≠n ch·ªânh s·ª≠a", JOptionPane.YES_NO_OPTION);
		if (confirm != JOptionPane.YES_OPTION) {
			return;
		}

		// ‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ c√°c TextField
		String bookId = view.getTxtBookId().getText();
		String title = view.getTxtBookName().getText();
		String author = view.getTxtAuthor().getText();
		String publisher = view.getCmbPublisher().getSelectedItem().toString();
		String category = view.getCmbCategory().getSelectedItem().toString();
		String year = view.getTxtPublicationYear().getText();
		String purchasePrice = view.getTxtPurchasePrice().getText();
		String price = view.getTxtPrice().getText();
		String quantity = view.getTxtQuantity().getText();
		String entryDate = view.getTxtEntryDate().getText();

		// ‚úÖ T·∫°o c√¢u l·ªánh SQL UPDATE
		String sql = String.format(
				"UPDATE book SET " + "Title = '%s', " + "AuthorId = (SELECT AuthorId FROM author WHERE Name = '%s'), "
						+ "PublisherId = (SELECT PublisherId FROM publisher WHERE Name = '%s'), "
						+ "CategoryId = (SELECT CategoryId FROM category WHERE CategoryName = '%s'), "
						+ "PublicationDate = '%s', " + "PurchasePrice = '%s', " + "Price = '%s', " + "Quantity = '%s', "
						+ "EntryDate = '%s' " + "WHERE BookId = '%s'",
				title, author, publisher, category, year, purchasePrice, price, quantity, entryDate, bookId);

		// ‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu trong database
		if (DataProvider.getInstance().update(sql)) {
			JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!", "Th√¥ng b√°o",
					JOptionPane.INFORMATION_MESSAGE);
			reloadData(sql);
			clearFields();
		} else {
			JOptionPane.showMessageDialog(view, "L·ªói khi c·∫≠p nh·∫≠t s√°ch!", "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	/** ‚úÖ X√≥a s√°ch */
	private void deleteBook() {
		if (view.getTxtBookId().getText().isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng nh·∫≠p m√£ s√°ch c·∫ßn x√≥a", "Th√¥ng b√°o", JOptionPane.OK_OPTION);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° s√°ch n√†y?", "X√°c nh·∫≠n xo√°",
				JOptionPane.YES_NO_OPTION);
		if (confirm != JOptionPane.YES_OPTION) {
			return;
		}

		// ‚úÖ L·∫•y BookId t·ª´ TextField
		String bookId = view.getTxtBookId().getText().trim();

		// ‚úÖ Ki·ªÉm tra xem bookId l√† ki·ªÉu s·ªë hay chu·ªói
		boolean isNumeric = bookId.matches("\\d+"); // Ki·ªÉm tra n·∫øu ch·ªâ ch·ª©a s·ªë

		// ‚úÖ X√≥a d·ªØ li·ªáu trong Database theo ki·ªÉu d·ªØ li·ªáu
		String sql;
		if (isNumeric) {
			sql = String.format("DELETE FROM book WHERE BookId = %s", bookId); // N·∫øu BookId l√† INT
		} else {
			sql = String.format("DELETE FROM book WHERE BookId = '%s'", bookId); // N·∫øu BookId l√† VARCHAR
		}

		if (DataProvider.getInstance().delete(sql)) {
			JOptionPane.showMessageDialog(view, "X√≥a s√°ch th√†nh c√¥ng!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
			reloadData(sql);
			clearFields();
		} else {
			JOptionPane.showMessageDialog(view, "L·ªói khi xo√° s√°ch!", "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	/** üîπ H√†m d√πng chung ƒë·ªÉ l·∫•y gi√° tr·ªã duy nh·∫•t */
	private String fetchSingleValue(String sql, String columnName) {
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			if (rs.next()) {
				return rs.getString(columnName);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return "";
	}

	/** ‚úÖ T·∫°o m√£ s√°ch t·ª± ƒë·ªông */
	private void createBookId() {
		String nextId = fetchSingleValue("SELECT MAX(BookId) + 1 FROM book", "MAX(BookId) + 1");
		view.getTxtBookId().setText(nextId);
	}

	private void findBookData() {
		String id = view.getTxtFind().getText();
		String name = view.getTxtFind().getText();

		boolean isNumeric = id.matches("\\d+"); // Ki·ªÉm tra xem id ch·ªâ ch·ª©a s·ªë hay kh√¥ng

		String sql;
		if (isNumeric) {
			sql = query + " WHERE BookId = " + id + " OR Title LIKE '%" + name + "%'";
		} else {
			sql = query + " WHERE Title LIKE '%" + name + "%'";
		}

		view.setData(loadBookData(sql));
		System.out.println(sql);
	}

	private void tableRowClick(JTable table, DefaultTableModel model) {
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int selectedRow = table.getSelectedRow();
				if (selectedRow != -1) { // ƒê·∫£m b·∫£o c√≥ h√†ng ƒë∆∞·ª£c ch·ªçn
					view.getTxtBookId().setText(model.getValueAt(selectedRow, 0).toString());
					view.getTxtBookName().setText(model.getValueAt(selectedRow, 1).toString());
					view.getTxtAuthor().setText(model.getValueAt(selectedRow, 2).toString());
					view.getCmbPublisher().setSelectedItem(model.getValueAt(selectedRow, 3).toString());
					view.getCmbCategory().setSelectedItem(model.getValueAt(selectedRow, 4).toString());
					view.getTxtPublicationYear().setText(model.getValueAt(selectedRow, 5).toString());
					view.getTxtPurchasePrice().setText(model.getValueAt(selectedRow, 6).toString());
					view.getTxtPrice().setText(model.getValueAt(selectedRow, 7).toString());
					view.getTxtQuantity().setText(model.getValueAt(selectedRow, 8).toString());
					view.getTxtEntryDate().setText(model.getValueAt(selectedRow, 9).toString());
				}
			}
		});
	}

	private void clearFields() {
		// X√≥a tr·∫Øng t·∫•t c·∫£ JTextField
		view.getTxtBookId().setText("");
		view.getTxtBookName().setText("");
		view.getTxtAuthor().setText("");
		view.getTxtPublicationYear().setText("");
		view.getTxtPurchasePrice().setText("");
		view.getTxtPrice().setText("");
		view.getTxtQuantity().setText("");
		view.getTxtEntryDate().setText("");

		// ƒê·∫∑t JComboBox v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh (ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n)
		view.getCmbPublisher().setSelectedIndex(0);
		view.getCmbCategory().setSelectedIndex(0);
	}

}
