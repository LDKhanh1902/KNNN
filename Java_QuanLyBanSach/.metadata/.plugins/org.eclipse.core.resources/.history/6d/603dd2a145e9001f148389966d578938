package vn.DA_KNNN.Controller;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import vn.DA_KNNN.Components.GetComponent;
import vn.DA_KNNN.Model.DataProvider;
import vn.DA_KNNN.View.AuthorView;

public class AuthorController {
	private AuthorView view;
	private String query = "SELECT `AuthorId` as 'M√£ t√°c gi·∫£', `Name` as 'T√™n t√°c gi·∫£', `BirthDate` as 'Ng√†y sinh', `Nationality` as 'Qu√≥c t·ªãch',(SELECT COUNT(*) FROM book WHERE book.AuthorId = author.AuthorId) AS 'S·ªë t√°c ph·∫©m'  FROM `author`";

	public AuthorController(AuthorView _view) {
		this.view = _view;

		setupEventListeners();
		tableRowClick(view.getAuthorTable(), GetComponent.loadDataTable(query));
		view.setData(GetComponent.loadDataTable(query));
	}

	private void reloadData(String sql) {
		DefaultTableModel model = GetComponent.loadDataTable(sql);
		tableRowClick(view.getAuthorTable(), model);
		view.setData(model);
	}

	private void setupEventListeners() {
		view.getBtnAdd().addActionListener(e -> addAuthor());
		view.getBtnEdit().addActionListener(e -> editAuthor());
		view.getBtnDelete().addActionListener(e -> deleteAuthor());
		view.getBtnCreateId().addActionListener(e -> createAuthorId());
		view.getBtnFind().addActionListener(e -> findAuthorData());
	}

	private void findAuthorData() {
		String id = view.getTxtFind().getText();
		String name = view.getTxtFind().getText();

		boolean isNumeric = id.matches("\\d+"); // Ki·ªÉm tra xem id ch·ªâ ch·ª©a s·ªë hay kh√¥ng

		String sql;
		if (isNumeric) {
			sql = query + " WHERE AuthorId = " + id + " OR Name LIKE '%" + name + "%'";
		} else {
			sql = query + " WHERE Name LIKE '%" + name + "%'";
		}

		view.setData(GetComponent.loadDataTable(sql));
		System.out.println(sql);
	}

	/** üîπ H√†m d√πng chung ƒë·ªÉ l·∫•y gi√° tr·ªã duy nh·∫•t */
	private String fetchSingleValue(String sql, String columnName) {
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			if (rs.next()) {
				return rs.getString(columnName);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return "";
	}

	/** ‚úÖ T·∫°o m√£ s√°ch t·ª± ƒë·ªông */
	private void createAuthorId() {
		String nextId = fetchSingleValue("SELECT MAX(AuthorId) + 1 FROM author", "MAX(AuthorId) + 1");
		view.getTxtAuthorId().setText(nextId);
	}

	private void deleteAuthor() {
		if (view.getTxtAuthorId().getText().isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng nh·∫≠p m√£ s√°ch c·∫ßn x√≥a", "Th√¥ng b√°o", JOptionPane.OK_OPTION);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° s√°ch n√†y?", "X√°c nh·∫≠n xo√°",
				JOptionPane.YES_NO_OPTION);
		if (confirm != JOptionPane.YES_OPTION) {
			return;
		}

		// ‚úÖ L·∫•y BookId t·ª´ TextField
		String AuthorId = view.getTxtAuthorId().getText().trim();

		// ‚úÖ Ki·ªÉm tra xem bookId l√† ki·ªÉu s·ªë hay chu·ªói
		boolean isNumeric = AuthorId.matches("\\d+"); // Ki·ªÉm tra n·∫øu ch·ªâ ch·ª©a s·ªë

		// ‚úÖ X√≥a d·ªØ li·ªáu trong Database theo ki·ªÉu d·ªØ li·ªáu
		String sql;
		if (isNumeric) {
			sql = String.format("DELETE FROM author WHERE AuthorId = %s", AuthorId); // N·∫øu BookId l√† INT
		} else {
			sql = String.format("DELETE FROM author WHERE AuthorId = '%s'", AuthorId); // N·∫øu BookId l√† VARCHAR
		}

		if (DataProvider.getInstance().delete(sql)) {
			JOptionPane.showMessageDialog(view, "X√≥a s√°ch th√†nh c√¥ng!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
			reloadData(sql);
			clearFields();
		} else {
			JOptionPane.showMessageDialog(view, "L·ªói khi xo√° s√°ch!", "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void editAuthor() {
		try {
			// ‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ giao di·ªán
			String authorId = view.getTxtAuthorId().getText().trim();
			String authorName = view.getTxtAuthorName().getText().trim();
			String birthDate = view.getTxtBirthDate().getText().trim();
			String nationality = view.getTxtNationality().getText().trim();

			// ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
			if (authorId.isEmpty() || authorName.isEmpty() || birthDate.isEmpty() || nationality.isEmpty()) {
				JOptionPane.showMessageDialog(view, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", "L·ªói",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			// ‚úÖ Ki·ªÉm tra xem `AuthorId` c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi s·ª≠a
			String existingAuthor = fetchSingleValue("SELECT AuthorId FROM author WHERE AuthorId = '" + authorId + "'",
					"AuthorId");
			if (existingAuthor.isEmpty()) {
				JOptionPane.showMessageDialog(view, "M√£ t√°c gi·∫£ kh√¥ng t·ªìn t·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
				return;
			}

			// ‚úÖ X√°c nh·∫≠n c·∫≠p nh·∫≠t d·ªØ li·ªáu
			int confirm = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin t√°c gi·∫£ n√†y?",
					"X√°c nh·∫≠n c·∫≠p nh·∫≠t", JOptionPane.YES_NO_OPTION);
			if (confirm != JOptionPane.YES_OPTION) {
				return;
			}

			// ‚úÖ C·∫≠p nh·∫≠t d·ªØ li·ªáu trong b·∫£ng `author`
			String sql = String.format(
					"UPDATE author SET Name = '%s', BirthDate = '%s', Nationality = '%s' " + "WHERE AuthorId = '%s'",
					authorName, birthDate, nationality, authorId);

			if (DataProvider.getInstance().update(sql)) {
				JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t t√°c gi·∫£ th√†nh c√¥ng!", "Th√¥ng b√°o",
						JOptionPane.INFORMATION_MESSAGE);
				reloadData(sql); // ‚úÖ C·∫≠p nh·∫≠t l·∫°i b·∫£ng sau khi s·ª≠a
				clearFields(); // ‚úÖ X√≥a d·ªØ li·ªáu nh·∫≠p sau khi s·ª≠a
			} else {
				JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t t√°c gi·∫£ th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(view, "ƒê√£ x·∫£y ra l·ªói: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void addAuthor() {
		try {
			// ‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ giao di·ªán
			String authorId = view.getTxtAuthorId().getText().trim();
			String authorName = view.getTxtAuthorName().getText().trim();
			String birthDate = view.getTxtBirthDate().getText().trim();
			String nationality = view.getTxtNationality().getText().trim();

			// ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
			if (authorId.isEmpty() || authorName.isEmpty() || birthDate.isEmpty() || nationality.isEmpty()) {
				JOptionPane.showMessageDialog(view, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", "L·ªói",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			// ‚úÖ Ki·ªÉm tra xem `AuthorId` ƒë√£ t·ªìn t·∫°i ch∆∞a
			String existingAuthor = fetchSingleValue("SELECT AuthorId FROM author WHERE AuthorId = '" + authorId + "'",
					"AuthorId");
			if (!existingAuthor.isEmpty()) {
				JOptionPane.showMessageDialog(view, "M√£ t√°c gi·∫£ ƒë√£ t·ªìn t·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
				return;
			}

			// ‚úÖ Th√™m d·ªØ li·ªáu v√†o b·∫£ng `author`
			String sql = String.format(
					"INSERT INTO author (AuthorId, Name, BirthDate, Nationality) " + "VALUES ('%s', '%s', '%s', '%s')",
					authorId, authorName, birthDate, nationality);

			if (DataProvider.getInstance().insert(sql)) {
				JOptionPane.showMessageDialog(view, "Th√™m t√°c gi·∫£ th√†nh c√¥ng!", "Th√¥ng b√°o",
						JOptionPane.INFORMATION_MESSAGE);
				reloadData(sql); // ‚úÖ C·∫≠p nh·∫≠t l·∫°i b·∫£ng sau khi th√™m
				clearFields(); // ‚úÖ X√≥a d·ªØ li·ªáu nh·∫≠p sau khi th√™m
			} else {
				JOptionPane.showMessageDialog(view, "Th√™m t√°c gi·∫£ th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(view, "ƒê√£ x·∫£y ra l·ªói: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void tableRowClick(JTable table, DefaultTableModel model) {
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int selectedRow = table.getSelectedRow();
				if (selectedRow != -1) { // ƒê·∫£m b·∫£o c√≥ h√†ng ƒë∆∞·ª£c ch·ªçn
					view.getTxtAuthorId().setText(model.getValueAt(selectedRow, 0).toString());
					view.getTxtAuthorName().setText(model.getValueAt(selectedRow, 1).toString());
					view.getTxtBirthDate().setText(model.getValueAt(selectedRow, 2).toString());
					view.getTxtNationality().setText(model.getValueAt(selectedRow, 3).toString());
				}
			}
		});
	}

	private void clearFields() {
		view.getTxtAuthorId().setText("");
		view.getTxtAuthorName().setText("");
		view.getTxtBirthDate().setText("");
		view.getTxtNationality().setText("");
	}
}
