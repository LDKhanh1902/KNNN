package vn.DA_KNNN.Controller;

import java.lang.module.ModuleDescriptor.Exports;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

import javax.swing.table.DefaultTableModel;

import com.itextpdf.text.pdf.parser.Line;

import vn.DA_KNNN.Components.ColumnChart;
import vn.DA_KNNN.Components.ExcelExporter;
import vn.DA_KNNN.Components.LineChart;
import vn.DA_KNNN.Components.PieChart;
import vn.DA_KNNN.Model.DataProvider;
import vn.DA_KNNN.View.RevenueView;

public class RevenueController {
	private RevenueView view;

	public RevenueController(RevenueView _view) {
		this.view = _view;
		this.view.getExportPdfButton().addActionListener(e->exportRevenue());
		setPieChartValue();
		setColumnChart();
		setLineChart();
		
		String sql = "SELECT category.CategoryName as 'Thể loại', COALESCE(SUM(payment.Amount), 0) AS 'Tổng tiền đã bán' FROM category LEFT JOIN book ON book.CategoryId = category.CategoryId LEFT JOIN paydetails ON paydetails.BookId = book.BookId \r\n"
				+ "LEFT JOIN payment ON payment.PaymentId = paydetails.PaymentId\r\n"
				+ "GROUP BY category.CategoryName;\r\n";
		view.setData(loadDataTable(sql));
	}

	private void setPieChartValue() {
		int i = 0;
		PieChart pie = view.getPieChart();
		String[] columns = new String[100];
		int[] values = new int[100];

		String sql = "SELECT category.CategoryName, COALESCE(SUM(paydetails.Quantity), 0) AS TotalQuantity FROM category "
				+ "LEFT JOIN book ON book.CategoryId = category.CategoryId "
				+ "LEFT JOIN paydetails ON paydetails.BookId = book.BookId GROUP BY category.CategoryName";

		Map<String, Integer> data = getDataPayment(sql);

		if (data != null) {
			for (Map.Entry<String, Integer> entry : data.entrySet()) {
				columns[i] = entry.getKey();
				values[i] = entry.getValue();
				i++;
			}
		}
		pie.setTitle("Thể loại sách đã bán trong tháng");
		pie.setColumnNames(Arrays.copyOf(columns, i));
		pie.setValues(Arrays.copyOf(values, i));

		pie.updateChart(); // ✅ Gọi để vẽ lại biểu đồ
	}

	private void setColumnChart() {
		String sql = "SELECT MONTH(PaymentDate) AS Month, SUM(Amount) AS TotalRevenue "
				+ "FROM payment WHERE YEAR(PaymentDate) = YEAR(CURDATE()) "
				+ "GROUP BY MONTH(PaymentDate) ORDER BY MONTH(PaymentDate);";
		ColumnChart column = view.getColumnChart();
		int[] values = new int[12]; // 12 tháng

		Map<String, Integer> data = getDataPayment(sql);

		if (data != null) {
			for (Map.Entry<String, Integer> entry : data.entrySet()) {
				int month = Integer.parseInt(entry.getKey()); // Lấy tháng (1-12)
				values[month - 1] = entry.getValue(); // Gán vào mảng theo index tháng
			}
		}
		column.setTitle("Doanh thu trong năm");
		column.setValues(values);
		column.updateChart(); // ✅ Cập nhật biểu đồ
	}

	private void setLineChart() {
	    LineChart line = view.getLineChart();
	    int year = LocalDate.now().getYear();

	    // ✅ Khởi tạo mảng 5 phần tử vì chỉ lấy dữ liệu 5 năm gần nhất
	    String[] columns = new String[5];
	    int[] values = new int[5];

	    // ✅ Tạo danh sách năm từ hiện tại -4 năm trước
	    for (int j = 0; j < 5; j++) {
	        columns[j] = String.valueOf(year - (4 - j)); // Lấy thứ tự từ cũ → mới
	    }

	    // ✅ Câu lệnh SQL lấy doanh thu của 5 năm gần nhất
	    String sql = "SELECT YEAR(PaymentDate) AS Year, SUM(Amount) AS TotalRevenue " +
	                 "FROM payment WHERE YEAR(PaymentDate) >= YEAR(CURDATE()) - 4 " +
	                 "GROUP BY YEAR(PaymentDate) ORDER BY YEAR(PaymentDate) ASC;";

	    Map<String, Integer> data = getDataPayment(sql);

	    // ✅ Gán dữ liệu vào `values[]`
	    if (data != null) {
	        for (int j = 0; j < 5; j++) {
	            String yearKey = columns[j];
	            values[j] = data.getOrDefault(yearKey, 0); // Nếu không có dữ liệu -> gán 0
	        }
	    }

	    // ✅ Cập nhật biểu đồ
	    line.setTitle("Doanh thu từ 5 năm trở lại đây");
	    line.setColumnNames(columns);
	    line.setValues(values);
	    line.setSeries("Doanh thu");
	    line.updateChart();
	}

	private void exportRevenue() {
        String templatePath = "C:\\Users\\KHANH\\OneDrive\\Documents\\BaoCao_DoanhThu.xlsx";
        String outputPath = "C:\\Users\\KHANH\\OneDrive\\Documents\\BaoCaoDoanhThu.xlsx";
        String sql = "SET @row_number = 0;\r\n"
        		+ "\r\n"
        		+ "SELECT \r\n"
        		+ "    (@row_number := @row_number + 1) AS 'STT',\r\n"
        		+ "    SUM(paydetails.Quantity) AS 'Tổng số lượng sách bán',\r\n"
        		+ "    COUNT(paydetails.BookId) AS 'Tổng số đơn hàng',\r\n"
        		+ "    CONCAT('Tháng ', MONTH(payment.PaymentDate), '-', YEAR(payment.PaymentDate)) AS 'Thời gian',\r\n"
        		+ "    FORMAT(SUM(paydetails.Quantity * paydetails.price), 0) AS 'Tổng doanh thu (VND)'\r\n"
        		+ "FROM \r\n"
        		+ "    paydetails\r\n"
        		+ "JOIN \r\n"
        		+ "    payment ON paydetails.PaymentId = payment.PaymentId\r\n"
        		+ "JOIN \r\n"
        		+ "    book ON paydetails.BookId = book.BookId\r\n"
        		+ "JOIN \r\n"
        		+ "    category ON book.CategoryId = category.CategoryId\r\n"
        		+ "WHERE \r\n"
        		+ "    YEAR(payment.PaymentDate) = YEAR(CURDATE())  -- Chọn dữ liệu của năm hiện tại\r\n"
        		+ "GROUP BY \r\n"
        		+ "    MONTH(payment.PaymentDate)\r\n"
        		+ "ORDER BY \r\n"
        		+ "    MONTH(payment.PaymentDate);";
        view.setData(loadDataTable(sql));
		ExcelExporter.updateExcelTemplate(templatePath, outputPath, loadDataTable(sql));
	}
	
	private DefaultTableModel loadDataTable(String sql) {
		DefaultTableModel model = new DefaultTableModel();
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			String[] columns = { "Mã thể loại", "Tên thể loại", "Mô tả" };

			if (rs == null) {
				return new DefaultTableModel(columns, 0);
			}

			ResultSetMetaData meta = rs.getMetaData();
			int columnCount = meta.getColumnCount();
			// ✅ Khởi tạo và lấy tên cột từ metadata
			String[] columnNames = new String[columnCount];
			for (int i = 1; i <= columnCount; i++) {
				columnNames[i - 1] = meta.getColumnLabel(i);
			}
			model.setColumnIdentifiers(columnNames); // Gán tên cột cho bảng

			// ✅ Lặp qua từng dòng dữ liệu và thêm vào bảng
			while (rs.next()) {
				Object[] rowData = new Object[columnCount];
				for (int i = 1; i <= columnCount; i++) {
					rowData[i - 1] = rs.getObject(i);
				}
				model.addRow(rowData);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return model;
	}

	private Map<String, Integer> getDataPayment(String sql) {
		Map<String, Integer> data = new HashMap<String, Integer>();
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			while (rs.next()) {
				data.put(rs.getString(1), rs.getInt(2));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return data;
	}
}
