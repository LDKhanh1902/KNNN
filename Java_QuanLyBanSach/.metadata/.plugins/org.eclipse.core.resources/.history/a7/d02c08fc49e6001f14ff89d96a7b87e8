package vn.DA_KNNN.Components;

import javax.swing.*;
import java.awt.*;
import java.util.Random;

class PieChartPaint extends JPanel {
    private static final long serialVersionUID = 1L;
    private final double[] values;
    private final Color[] colors;

    public PieChartPaint(double[] values) {
        if (values == null || values.length == 0) {
            throw new IllegalArgumentException("Dữ liệu biểu đồ không hợp lệ!");
        }
        this.values = values;
        this.colors = generateRandomColors(values.length);
    }

    private Color[] generateRandomColors(int count) {
        if (count <= 0) return new Color[0];

        Random random = new Random();
        Color[] colors = new Color[count];
        for (int i = 0; i < count; i++) {
            colors[i] = new Color(random.nextInt(156) + 100, random.nextInt(156) + 100, random.nextInt(156) + 100);
        }
        return colors;
    }

    public Color[] getColors() {
        return colors;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (values == null || values.length == 0) return;

        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        int width = getWidth();
        int height = getHeight();
        int diameter = Math.min(width, height) - 40;
        int x = (width - diameter) / 2;
        int y = (height - diameter) / 2;

        double total = calculateTotal(values);
        if (total == 0) return; // Tránh lỗi chia cho 0

        double currentAngle = 0.0;

        for (int i = 0; i < values.length; i++) {
            double sliceAngle = 360.0 * (values[i] / total);
            g2d.setColor(colors[i]);
            g2d.fillArc(x, y, diameter, diameter, (int) Math.round(currentAngle), (int) Math.round(sliceAngle));
            currentAngle += sliceAngle;
        }

        g2d.setColor(Color.BLACK);
        g2d.drawOval(x, y, diameter, diameter);
    }

    private double calculateTotal(double[] values) {
        double total = 0;
        for (double value : values) {
            total += value;
        }
        return total;
    }
}

public class PieChart extends JPanel {
    private static final long serialVersionUID = 1L;
    private final Color[] colors;

    public PieChart(String[] labels, double[] values) {
        if (labels == null || values == null || labels.length != values.length) {
            throw new IllegalArgumentException("Số lượng nhãn và dữ liệu không khớp!");
        }

        setLayout(new BorderLayout());

        JLabel lblTitle = new JLabel("Biểu đồ loại sách", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 16));
        add(lblTitle, BorderLayout.NORTH);

        PieChartPaint pieChartPanel = new PieChartPaint(values);
        pieChartPanel.setPreferredSize(new Dimension(300, 300));
        add(pieChartPanel, BorderLayout.CENTER);

        this.colors = pieChartPanel.getColors();

        JPanel legendPanel = createLegendPanel(labels, values);
        add(legendPanel, BorderLayout.EAST);
    }

    private JPanel createLegendPanel(String[] labels, double[] values) {
        JPanel legendPanel = new JPanel();
        legendPanel.setLayout(new GridBagLayout());
        legendPanel.setBorder(BorderFactory.createTitledBorder("Chú thích"));
        legendPanel.setPreferredSize(new Dimension(150, 0));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.NORTHWEST;

        double total = calculateTotal(values);
        if (total == 0) return legendPanel; // Tránh lỗi chia cho 0

        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.weightx = 0;
            gbc.weighty = 0;
            JLabel colorLabel = new JLabel();
            colorLabel.setOpaque(true);
            colorLabel.setBackground(colors[i]);
            colorLabel.setPreferredSize(new Dimension(20, 20));
            colorLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            legendPanel.add(colorLabel, gbc);

            gbc.gridx = 1;
            gbc.gridy = i;
            gbc.weightx = 1;
            gbc.weighty = 0;
            String text = String.format("%s: %.2f%%", labels[i], (values[i] / total) * 100);
            JLabel textLabel = new JLabel(text);
            legendPanel.add(textLabel, gbc);
        }

        gbc.gridx = 0;
        gbc.gridy = labels.length;
        gbc.weighty = 1;
        legendPanel.add(new JLabel(), gbc);

        return legendPanel;
    }

    private double calculateTotal(double[] values) {
        double total = 0;
        for (double value : values) {
            total += value;
        }
        return total;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame f = new JFrame("Biểu đồ tròn");
            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            f.setSize(600, 400);
            f.setLayout(new BorderLayout());

            String[] labels = {"Sách Văn", "Sách Toán", "Sách Khoa học", "Sách Lịch sử"};
            double[] values = {10.0, 20.0, 30.0, 40.0};

            PieChart pieChart = new PieChart(labels, values);
            f.add(pieChart, BorderLayout.CENTER);

            f.setVisible(true);
        });
    }
}
