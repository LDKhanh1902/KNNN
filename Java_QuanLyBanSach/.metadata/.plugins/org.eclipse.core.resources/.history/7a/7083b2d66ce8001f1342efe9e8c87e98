package vn.DA_KNNN.View;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import vn.DA_KNNN.Components.ExcelExporter;
import vn.DA_KNNN.Model.DataProvider;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

public class Test extends JPanel{
    public static void main(String[] args) {
        JFrame f = new JFrame();
        Test t = new Test();
        t.exportRevenue();
        
        f.add(t);
    }
    
    
    /** ✅ Load dữ liệu sách vào bảng */
	public void exportRevenue() {
			String templatePath = "C:\\Users\\KHANH\\OneDrive\\Documents\\BaoCaoDoanhThu1.xlsx";
		    String url = getClass().getResource("/templates/BaoCao_DoanhThu.xlsx").getPath();
		    
		    System.out.println(url);
		    
		    // SQL Query
		    String sql = "SET @row_number := 0; SELECT (@row_number := @row_number + 1) AS 'stt', COALESCE(SUM(paydetails.Quantity), 0) AS 'quantity', COALESCE(COUNT(DISTINCT paydetails.BookId), 0) AS 'quantitybookpay', CONCAT('Tháng ', m.month, '-', YEAR(CURDATE())) AS 'month', FORMAT(COALESCE(SUM(paydetails.Quantity * paydetails.price), 0), 0) AS 'amount' FROM (SELECT 1 AS month UNION SELECT 2 UNION SELECT 3UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12) m LEFT JOIN payment ON MONTH(payment.PaymentDate) = m.month AND YEAR(payment.PaymentDate) = YEAR(CURDATE()) LEFT JOIN paydetails ON paydetails.PaymentId = payment.PaymentId LEFT JOIN book ON paydetails.BookId = book.BookId LEFT JOIN category ON book.CategoryId = category.CategoryId GROUP BY m.month ORDER BY m.month;";
		    
		    DefaultTableModel model = loadDataTable(sql);
		    System.out.println(model.getColumnCount());
		    ExcelExporter.updateExcelTemplate(url, templatePath, loadDataTable(sql));
		}
	
	private DefaultTableModel loadDataTable(String sql) {
		DefaultTableModel model = new DefaultTableModel();
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			String[] columns = { "Mã thể loại", "Tên thể loại", "Mô tả" };

			if (rs == null) {
				return new DefaultTableModel(columns, 0);
			}

			ResultSetMetaData meta = rs.getMetaData();
			int columnCount = meta.getColumnCount();
			// ✅ Khởi tạo và lấy tên cột từ metadata
			String[] columnNames = new String[columnCount];
			for (int i = 1; i <= columnCount; i++) {
				columnNames[i - 1] = meta.getColumnLabel(i);
			}
			model.setColumnIdentifiers(columnNames); // Gán tên cột cho bảng

			// ✅ Lặp qua từng dòng dữ liệu và thêm vào bảng
			while (rs.next()) {
				Object[] rowData = new Object[columnCount];
				for (int i = 1; i <= columnCount; i++) {
					rowData[i - 1] = rs.getObject(i);
				}
				model.addRow(rowData);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return model;
	}
		
}
