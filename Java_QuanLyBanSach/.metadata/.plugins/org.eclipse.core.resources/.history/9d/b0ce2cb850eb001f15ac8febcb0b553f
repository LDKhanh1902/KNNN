package vn.DA_KNNN.Controller;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import vn.DA_KNNN.Components.ExcelExporter;
import vn.DA_KNNN.Components.AppHelper;
import vn.DA_KNNN.Model.DataProvider;
import vn.DA_KNNN.View.EmployeeView;

public class EmployeeController {
	private EmployeeView view;
	private String query = "SELECT `EmployeeId` AS 'M√£ nh√¢n vi√™n',`FirstName` AS 'T√™n',`LastName` AS 'H·ªç',`BirthDate` AS 'Ng√†y sinh',"
			+ "`HireDate` AS 'Ng√†y tuy·ªÉn d·ª•ng',`Email` AS 'Email',`PhoneNumber` AS 'S·ªë ƒëi·ªán tho·∫°i',`Address` AS 'ƒê·ªãa ch·ªâ',"
			+ "CAST(`salary` AS DECIMAL(10,0)) * CAST(`Coefficient` AS DECIMAL(10,0)) AS 'L∆∞∆°ng', `PositionName` AS 'Ch·ª©c v·ª•' FROM `employee` "
			+ "JOIN `position` ON `position`.`PositionId` = `employee`.`PositionId`";

	public EmployeeController(EmployeeView _view) {
		this.view = _view;
		setupEventListeners();
		view.setCmbPositionName(loadPositionName());
		loadData(query+" ORDER BY `EmployeeId` ;");
	}

	private void loadData(String sql) {
		DefaultTableModel model = AppHelper.loadDataTable(sql);
		tableRowClick(view.getTable(), model);
		view.getTable().setModel(model);
	}

	/** üîπ Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán cho c√°c n√∫t */
	private void setupEventListeners() {
		view.getBtnAdd().addActionListener(e -> addEmployee());
		view.getBtnEdit().addActionListener(e -> editEmployee());
		view.getBtnDelete().addActionListener(e -> deleteEmployee());
		view.getBtnCreateId().addActionListener(e -> createEmployeeId());
		view.getSearchPanel().getBtnSearch().addActionListener(e -> findEmployeeData());
		view.getBtnExport().addActionListener(e->exportListEmployee());
		view.getSearchPanel().getBtnRefresh().addActionListener(e->{
			clearFields();
			view.getSearchPanel().getTxtSearch().setText("");
		});
	}

	private void exportListEmployee() {
		// TODO Auto-generated method stub
        String templatePath = getClass().getResource("/templates/Employee_Template.xlsx").getPath();
        String outputPath = Paths.get(System.getProperty("user.home"), "Documents", String.format("\\DanhSachNhanVien_%s.xlsx", LocalDate.now())).toString();
        String sql = query + " ORDER BY `EmployeeId`";
        
		ExcelExporter.updateExcelTemplate(view, templatePath, outputPath, AppHelper.loadDataTable(sql));
	}

	private void addEmployee() {
		String employeeId = view.getTxtEmployeeId().getText().trim();
		String firstName = view.getTxtFirstName().getText().trim();
		String lastName = view.getTxtLastName().getText().trim();
		String birthDate = view.getTxtBirthDate().getText().trim();
		String hireDate = view.getTxtHireDate().getText().trim();
		String email = view.getTxtEmail().getText().trim();
		String phoneNumber = view.getTxtPhoneNumber().getText().trim();
		String address = view.getTxtAddress().getText().trim();
		String positionName = view.getCmbPositionName().getSelectedItem().toString();

		// Ki·ªÉm tra xem c√°c tr∆∞·ªùng c√≥ b·ªã tr·ªëng hay kh√¥ng
		if (employeeId.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || birthDate.isEmpty()
				|| hireDate.isEmpty() || email.isEmpty() || phoneNumber.isEmpty() || address.isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", "Th√¥ng b√°o",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		// C√¢u l·ªánh SQL ƒë·ªÉ th√™m nh√¢n vi√™n
		String sql = String.format(
				"INSERT INTO employee (EmployeeId, FirstName, LastName, BirthDate, HireDate, Email, PhoneNumber, Address, PositionId) "
						+ "VALUES (%s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', (SELECT PositionId FROM position WHERE PositionName = '%s'))",
				employeeId, firstName, lastName, birthDate, hireDate, email, phoneNumber, address, positionName);

		// Th·ª±c thi c√¢u l·ªánh SQL ƒë·ªÉ th√™m nh√¢n vi√™n
		if (DataProvider.getInstance().insert(sql)) {
			JOptionPane.showMessageDialog(view, "Th√™m nh√¢n vi√™n th√†nh c√¥ng", "Th√¥ng b√°o",
					JOptionPane.INFORMATION_MESSAGE);
			loadData(query); // L√†m m·ªõi d·ªØ li·ªáu b·∫£ng
			clearFields(); // X√≥a c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
		} else {
			JOptionPane.showMessageDialog(view, "Th√™m nh√¢n vi√™n th·∫•t b·∫°i", "Th√¥ng b√°o", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void editEmployee() {
		String employeeId = view.getTxtEmployeeId().getText().trim();
		String firstName = view.getTxtFirstName().getText().trim();
		String lastName = view.getTxtLastName().getText().trim();
		String birthDate = view.getTxtBirthDate().getText().trim();
		String hireDate = view.getTxtHireDate().getText().trim();
		String email = view.getTxtEmail().getText().trim();
		String phoneNumber = view.getTxtPhoneNumber().getText().trim();
		String address = view.getTxtAddress().getText().trim();
		String positionName = view.getCmbPositionName().getSelectedItem().toString();

		// Ki·ªÉm tra xem c√°c tr∆∞·ªùng c√≥ b·ªã tr·ªëng hay kh√¥ng
		if (employeeId.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || birthDate.isEmpty()
				|| hireDate.isEmpty() || email.isEmpty() || phoneNumber.isEmpty() || address.isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin", "Th√¥ng b√°o",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		// C√¢u l·ªánh SQL ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n
		String sql = String.format(
				"UPDATE employee SET FirstName = '%s', LastName = '%s', BirthDate = '%s', HireDate = '%s', "
						+ "Email = '%s', PhoneNumber = '%s', Address = '%s', PositionId = (SELECT PositionId FROM position WHERE PositionName = '%s') "
						+ "WHERE EmployeeId = %s",
				firstName, lastName, birthDate, hireDate, email, phoneNumber, address, positionName, employeeId);

		// Th·ª±c thi c√¢u l·ªánh SQL ƒë·ªÉ c·∫≠p nh·∫≠t nh√¢n vi√™n
		if (DataProvider.getInstance().update(sql)) {
			JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng", "Th√¥ng b√°o",
					JOptionPane.INFORMATION_MESSAGE);
			loadData(query); // L√†m m·ªõi d·ªØ li·ªáu b·∫£ng
			clearFields(); // X√≥a c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
		} else {
			JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t nh√¢n vi√™n th·∫•t b·∫°i", "Th√¥ng b√°o", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void deleteEmployee() {
		String employeeId = view.getTxtEmployeeId().getText().trim();

		if (employeeId.isEmpty()) {
			JOptionPane.showMessageDialog(view, "Vui l√≤ng ch·ªçn nh√¢n vi√™n ƒë·ªÉ x√≥a", "Th√¥ng b√°o",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		// Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
		int option = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√¢n vi√™n n√†y?", "X√°c nh·∫≠n",
				JOptionPane.YES_NO_OPTION);
		if (option == JOptionPane.YES_OPTION) {
			// C√¢u l·ªánh SQL ƒë·ªÉ x√≥a nh√¢n vi√™n
			String sql = "DELETE FROM employee WHERE EmployeeId = " + employeeId;

			// Th·ª±c thi c√¢u l·ªánh SQL ƒë·ªÉ x√≥a nh√¢n vi√™n
			if (DataProvider.getInstance().delete(sql)) {
				JOptionPane.showMessageDialog(view, "X√≥a nh√¢n vi√™n th√†nh c√¥ng", "Th√¥ng b√°o",
						JOptionPane.INFORMATION_MESSAGE);
				loadData(query); // L√†m m·ªõi d·ªØ li·ªáu b·∫£ng
				clearFields(); // X√≥a c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
			} else {
				JOptionPane.showMessageDialog(view, "X√≥a nh√¢n vi√™n th·∫•t b·∫°i", "Th√¥ng b√°o", JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	/** üîπ H√†m d√πng chung ƒë·ªÉ l·∫•y gi√° tr·ªã duy nh·∫•t */
	private String fetchSingleValue(String sql, String columnName) {
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			if (rs.next()) {
				return rs.getString(columnName);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return "";
	}

	private void createEmployeeId() {
		// TODO Auto-generated method stub
		String nextId = fetchSingleValue("SELECT MAX(EmployeeId) + 1 FROM employee", "MAX(EmployeeId) + 1");
		view.getTxtEmployeeId().setText(nextId);
	}

	private void findEmployeeData() {
		// TODO Auto-generated method stub
		String id = view.getTxtFind().getText();
		String name = view.getTxtFind().getText();

		boolean isNumeric = id.matches("\\d+"); // Ki·ªÉm tra xem id ch·ªâ ch·ª©a s·ªë hay kh√¥ng

		String sql;
		if (isNumeric) {
			// Ki·ªÉm tra n·∫øu id l√† s·ªë, t√¨m theo EmployeeId
			sql = query + " WHERE EmployeeId = " + id + " OR FirstName LIKE '%" + name + "%' OR LastName LIKE '%" + name+ "%' ORDER BY `EmployeeId`";
		} else {
			// N·∫øu id kh√¥ng ph·∫£i l√† s·ªë, t√¨m theo FirstName ho·∫∑c LastName
			sql = query + " WHERE FirstName LIKE '%" + name + "%' OR LastName LIKE '%" + name + "%' ORDER BY `EmployeeId`";
		}

		loadData(sql);
	}
	
	/** ‚úÖ Load danh s√°ch nh√† xu·∫•t b·∫£n */
	private String[] loadPositionName() {
		return fetchColumnData("SELECT `PositionName` FROM `position`", "PositionName");
	}

	/** üîπ H√†m d√πng chung ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ m·ªôt c·ªôt */
	private String[] fetchColumnData(String sql, String columnName) {
		List<String> dataList = new ArrayList<>();
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			while (rs.next()) {
				dataList.add(rs.getString(columnName));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return dataList.toArray(new String[0]);
	}

	private void tableRowClick(JTable table, DefaultTableModel model) {
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int selectedRow = table.getSelectedRow();
				if (selectedRow != -1) { // ƒê·∫£m b·∫£o c√≥ h√†ng ƒë∆∞·ª£c ch·ªçn
					view.getTxtEmployeeId().setText(model.getValueAt(selectedRow, 0).toString()); // M√£ nh√¢n vi√™n
					view.getTxtFirstName().setText(model.getValueAt(selectedRow, 1).toString()); // T√™n
					view.getTxtLastName().setText(model.getValueAt(selectedRow, 2).toString()); // H·ªç
					view.getTxtBirthDate().setText(model.getValueAt(selectedRow, 3).toString()); // Ng√†y sinh
					view.getTxtHireDate().setText(model.getValueAt(selectedRow, 4).toString()); // Ng√†y tuy·ªÉn d·ª•ng
					view.getTxtEmail().setText(model.getValueAt(selectedRow, 5).toString()); // Email
					view.getTxtPhoneNumber().setText(model.getValueAt(selectedRow, 6).toString()); // S·ªë ƒëi·ªán tho·∫°i
					view.getTxtAddress().setText(model.getValueAt(selectedRow, 7).toString()); // ƒê·ªãa ch·ªâ
					view.getCmbPositionName().setSelectedItem(model.getValueAt(selectedRow, 9).toString()); // Ch·ª©c v·ª•
				}
			}
		});
	}

	private void clearFields() {
		// X√≥a tr·∫Øng t·∫•t c·∫£ JTextField
		view.getTxtEmployeeId().setText("");
		view.getTxtFirstName().setText("");
		view.getTxtLastName().setText("");
		view.getTxtBirthDate().setText("");
		view.getTxtHireDate().setText("");
		view.getTxtEmail().setText("");
		view.getTxtPhoneNumber().setText("");
		view.getTxtAddress().setText("");
		view.getCmbPositionName().setSelectedItem(0);
	}

}
