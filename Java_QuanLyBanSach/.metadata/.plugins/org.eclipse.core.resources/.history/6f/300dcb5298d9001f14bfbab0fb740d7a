package vn.DA_KNNN.View;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class MainView extends JFrame {
    private JPanel mainPanel, findPanel, sidebarPanel, headerPanel, infoPanel, bottomPanel;
    private JButton[] menuButtons;

    public MainView() {
        // Thiết lập cửa sổ chính
        setTitle("Dashboard Layout");
        setSize(1000, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(1000, 600)); // Đặt kích thước tối thiểu
        setLocationRelativeTo(null);

        // Thay đổi Look and Feel
        setSystemLookAndFeel();

        // Sử dụng BorderLayout
        getContentPane().setLayout(new BorderLayout());

        // Sidebar
        sidebarPanel = createResponsiveSidebar();
        sidebarPanel.setPreferredSize(new Dimension(200, 0)); // Đặt chiều rộng cố định cho sidebar
        getContentPane().add(sidebarPanel, BorderLayout.WEST);

        // Main Panel with GridBagLayout
        mainPanel = new JPanel(new GridBagLayout());
        getContentPane().add(mainPanel, BorderLayout.CENTER);

        // Add components to main panel
        setupMainPanel();

        // Default view
        setVisible(true);
    }

    private void setSystemLookAndFeel() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private List<ImageIcon> lstImg() {
        List<ImageIcon> icons = new ArrayList<>();
        try {
            URL resourceUrl = getClass().getResource("/images");
            if (resourceUrl != null) {
                File folder = new File(resourceUrl.toURI());
                File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".png") ||
                        name.toLowerCase().endsWith(".jpg") ||
                        name.toLowerCase().endsWith(".jpeg") ||
                        name.toLowerCase().endsWith(".gif"));
                if (files != null) {
                    for (File file : files) {
                        ImageIcon originalIcon = new ImageIcon(file.getAbsolutePath());
                        int width = 50;
                        int height = 50;
                        Image scaledImage = originalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
                        icons.add(new ImageIcon(scaledImage));
                    }
                }
            } else {
                System.out.println("Thư mục không tìm thấy.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return icons;
    }

    private JPanel createResponsiveSidebar() {
        sidebarPanel = new JPanel();
        sidebarPanel.setBackground(new Color(60, 63, 65));
        sidebarPanel.setLayout(new BorderLayout());

        JLabel dashboardLabel = new JLabel("QKT", SwingConstants.CENTER);
        dashboardLabel.setFont(new Font("Tahoma", Font.BOLD, 36));
        dashboardLabel.setForeground(Color.WHITE);
        sidebarPanel.add(dashboardLabel, BorderLayout.NORTH);

        JPanel buttonPanel = new JPanel(new GridLayout(5, 1, 0, 0));
        buttonPanel.setBackground(new Color(60, 63, 65));

        List<ImageIcon> icons = lstImg();

        menuButtons = new JButton[2];

        menuButtons[0] = new JButton("Dashboard", icons.isEmpty() ? null : icons.get(0));
        menuButtons[1] = new JButton("Manage", icons.isEmpty() ? null : icons.get(1));

        for (int i = 0; i < menuButtons.length; i++) {
            menuButtons[i].setBackground(new Color(100, 100, 100));
            buttonPanel.add(menuButtons[i]);
        }

        sidebarPanel.add(buttonPanel, BorderLayout.CENTER);

        return sidebarPanel;
    }

    private void setupMainPanel() {
        // GridBagConstraints for layout management
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 10, 0, 0);

        // Find Panel
        findPanel = createSearchPanel();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1;
        gbc.weighty = 0.1;
        mainPanel.add(findPanel, gbc);

        // Header Panel
        headerPanel = createHeader();
        gbc = new GridBagConstraints(); // Reset gbc
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1;
        gbc.weighty = 0.2;
        mainPanel.add(headerPanel, gbc);

        // Info Panel
        infoPanel = createInfoCards();
        gbc = new GridBagConstraints(); // Reset gbc
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1;
        gbc.weighty = 0.5; // Đảm bảo tỷ lệ chiều cao hợp lý
        gbc.fill = GridBagConstraints.BOTH; // Đảm bảo các thẻ giãn nở trong không gian
        mainPanel.add(infoPanel, gbc);


        // Bottom Panel
        bottomPanel = createBottomPanel();
        gbc = new GridBagConstraints(); // Reset gbc
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1;
        gbc.weighty = 0.2;
        mainPanel.add(bottomPanel, gbc);
    }

    private JPanel createSearchPanel() {
        findPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));

        JLabel searchLabel = new JLabel("Search:");
        JTextField searchField = new JTextField(20);
        JButton searchButton = new JButton("Find");

        findPanel.add(searchLabel);
        findPanel.add(searchField);
        findPanel.add(searchButton);

        return findPanel;
    }

    private JPanel createHeader() {
        // Tạo một JPanel sử dụng GridLayout với 3 cột
        headerPanel = new JPanel(new GridLayout(1, 3, 10, 0));

        // Panel cho doanh thu theo tháng
        JPanel monthlyRevenuePanel = new JPanel(new BorderLayout());
        monthlyRevenuePanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        JLabel lblMonthlyRevenue = new JLabel("Doanh thu theo tháng:", SwingConstants.CENTER);
        JLabel monthlyRevenueLabel = new JLabel("100.000.000", SwingConstants.CENTER);
        monthlyRevenuePanel.add(lblMonthlyRevenue, BorderLayout.NORTH);
        monthlyRevenuePanel.add(monthlyRevenueLabel, BorderLayout.CENTER);

        // Panel cho doanh thu theo năm
        JPanel yearlyRevenuePanel = new JPanel(new BorderLayout());
        yearlyRevenuePanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        JLabel lblYearlyRevenue = new JLabel("Doanh thu theo năm:", SwingConstants.CENTER);
        JLabel yearlyRevenueLabel = new JLabel("1.200.000.000", SwingConstants.CENTER);
        yearlyRevenuePanel.add(lblYearlyRevenue, BorderLayout.NORTH);
        yearlyRevenuePanel.add(yearlyRevenueLabel, BorderLayout.CENTER);

        // Panel cho thông tin người dùng
        JPanel userInfoPanel = new JPanel(new BorderLayout());
        userInfoPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        JLabel userInfoLabel = new JLabel("Xin chào! Nguyễn Văn A", SwingConstants.CENTER);
        userInfoPanel.add(userInfoLabel, BorderLayout.CENTER);

        // Thêm các panel vào headerPanel
        headerPanel.add(monthlyRevenuePanel);
        headerPanel.add(yearlyRevenuePanel);
        headerPanel.add(userInfoPanel);

        return headerPanel;
    }


    private JPanel createInfoCards() {
        infoPanel = new JPanel(new GridLayout(1, 4, 10, 10)); // Thêm khoảng cách giữa các thẻ (hgap, vgap)
        infoPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Tạo padding xung quanh panel

        infoPanel.add(createInfoCard("Số lượng sách: 10"));
        infoPanel.add(createInfoCard("Số nhân viên: 5"));
        infoPanel.add(createInfoCard("Số khách hàng: 20"));
        infoPanel.add(createInfoCard("Số tác giả: 8"));

        return infoPanel;
    }


    private JPanel createInfoCard(String text) {
        JPanel card = new JPanel();
        card.setLayout(new BorderLayout());
        card.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1)); // Đường viền mỏng
        card.setBackground(Color.WHITE); // Đặt màu nền
        card.setPreferredSize(new Dimension(150, 100)); // Đặt kích thước cố định cho thẻ

        JLabel label = new JLabel(text, SwingConstants.CENTER);
        label.setFont(new Font("Tahoma", Font.PLAIN, 14)); // Thay đổi kích thước font nếu cần
        card.add(label, BorderLayout.CENTER);

        return card;
    }


    private JPanel createBottomPanel() {
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new BorderLayout(0, 0));
        
        PieChart chartPanel = new PieChart(new String[]{"sach a", "sach b", "sach c"}, new double[]{30, 20, 50});
        chartPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        chartPanel.setBackground(Color.WHITE);
        
        bottomPanel.add(chartPanel);
        return bottomPanel;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(MainView::new);
    }
}
