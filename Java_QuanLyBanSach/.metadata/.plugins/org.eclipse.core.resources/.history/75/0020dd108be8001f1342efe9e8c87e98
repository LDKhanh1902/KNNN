package vn.DA_KNNN.Controller;

import vn.DA_KNNN.Components.ReceiptExporter;
import vn.DA_KNNN.Model.DataProvider;
import vn.DA_KNNN.Model.Payment;
import vn.DA_KNNN.View.SaleView;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

public class SaleController {
    private SaleView view;

    public SaleController(SaleView _view) {
        this.view = _view;
        setupEventListeners();
    }

    // ✅ Thiết lập các sự kiện cho giao diện
    private void setupEventListeners() {
        view.getSearchField().getDocument().addDocumentListener(new DocumentListener() {
            @Override public void insertUpdate(DocumentEvent e) { searchBook(); }
            @Override public void removeUpdate(DocumentEvent e) { searchBook(); }
            @Override public void changedUpdate(DocumentEvent e) { searchBook(); }
        });

        view.getBookTable().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) fillBookInfo();
            }
        });

        view.getAddButton().addActionListener(e -> addRowCartTable());
        view.getPayButton().addActionListener(e -> pay());
        view.setBookModel(loadDataTable("SELECT `Title`, `Price`, `Quantity` FROM `book`"));
    }

    // ✅ Tìm kiếm sách trong cơ sở dữ liệu và cập nhật bảng `bookTable`
    private void searchBook() {
        String keyword = view.getSearchField().getText();
        String sql = "SELECT `Title` as 'Tên sách', `Price` as 'Giá tiền', `Quantity` as 'Số lượng' FROM `book` WHERE `Title` LIKE '%" + keyword + "%'";

        DefaultTableModel model = new DefaultTableModel();
        try (ResultSet rs = DataProvider.getInstance().view(sql)) {
            ResultSetMetaData meta = rs.getMetaData();
            int columnCount = meta.getColumnCount();

            // Lấy tiêu đề cột
            String[] columnNames = new String[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                columnNames[i - 1] = meta.getColumnLabel(i);
            }
            model.setColumnIdentifiers(columnNames);

            // Lấy dữ liệu từ ResultSet
            while (rs.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = rs.getObject(i);
                }
                model.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        view.getBookTable().setModel(model);
    }

    // ✅ Lấy thông tin sách được chọn từ `bookTable`
    private void fillBookInfo() {
        int selectedRow = view.getBookTable().getSelectedRow();
        if (selectedRow >= 0) {
            view.getQuantityField().setText("1"); // Đặt mặc định số lượng là 1
        }
    }

    // ✅ Thêm sách vào giỏ hàng (`cartTable`)
    private void addRowCartTable() {
        JTable bookTable = view.getBookTable();
        JTable cartTable = view.getCartTable();

        int selectedRow = bookTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(view, "Vui lòng chọn một sách để thêm vào giỏ hàng!", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Lấy thông tin sách
        String name = bookTable.getValueAt(selectedRow, 0).toString();
        double price = Double.parseDouble(bookTable.getValueAt(selectedRow, 1).toString());
        int availableQuantity = Integer.parseInt(bookTable.getValueAt(selectedRow, 2).toString());

        // Lấy số lượng nhập vào
        int quantity;
        try {
            quantity = Integer.parseInt(view.getQuantityField().getText());
            if (quantity <= 0 || quantity > availableQuantity) {
                JOptionPane.showMessageDialog(view, "Số lượng không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(view, "Vui lòng nhập số hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel cartModel = (DefaultTableModel) cartTable.getModel();
        boolean found = false;

        
        // Cập nhật số lượng nếu sách đã có trong giỏ hàng
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            if (cartModel.getValueAt(i, 0).toString().equals(name)) {
                int existingQuantity = Integer.parseInt(cartModel.getValueAt(i, 2).toString());
                int newQuantity = existingQuantity + quantity;
                if (newQuantity > availableQuantity) {
                    JOptionPane.showMessageDialog(view, "Số lượng vượt quá tồn kho!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                cartModel.setValueAt(newQuantity, i, 2);
                cartModel.setValueAt(newQuantity * price, i, 3);
                found = true;
                break;
            }
        }

        // Nếu sách chưa có trong giỏ hàng, thêm dòng mới
        if (!found) {
            cartModel.addRow(new Object[]{name, price, quantity, quantity * price});
        }
    }

    // ✅ Xóa toàn bộ dữ liệu trong `cartTable`
    private void cleanData() {
        DefaultTableModel cartModel = (DefaultTableModel) view.getCartTable().getModel();
        if (cartModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(view, "Giỏ hàng đã trống!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        cartModel.setRowCount(0);
        view.getQuantityField().setText("1");
        view.setBookModel(loadDataTable("SELECT `Title`, `Price`, `Quantity` FROM `book`"));
        JOptionPane.showMessageDialog(view, "Đã xóa toàn bộ giỏ hàng!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }

    // ✅ Thanh toán và tạo hóa đơn Word
    private void pay() {
        if (view.getCartTable().getRowCount() == 0) {
            JOptionPane.showMessageDialog(view, "Giỏ hàng trống, không thể in hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String templatePath = "C:\\Users\\KHANH\\OneDrive\\Documents\\template.docx";
        String outputPath = "C:\\Users\\KHANH\\OneDrive\\Documents\\Invoice_Filled.docx";

        // Lấy dữ liệu từ giỏ hàng
        Map<String, String> invoiceData = getTableData();
        
        
        DefaultTableModel model = (DefaultTableModel)view.getCartTable().getModel();
        
        double amount = 0;
        
        for (int i = 0; i < model.getRowCount(); i++) {
        	System.out.println(model.getValueAt(i, 3).toString()+"x");
        	amount += Double.parseDouble(model.getValueAt(i, 3).toString());
		}
        Payment pay = new Payment(amount);
        System.out.println(amount+"y");
        DataProvider.getInstance().insert("INSERT INTO `payment`(`Amount`, `PaymentDate`) VALUES ("
        		+ String.format("'%s','%s')",pay.getAmount(),pay.getPaymentDate().toString()));
        try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        for (int i = 0; i < model.getRowCount(); i++) {
			String bookId = getBookId(model.getValueAt(i, 0).toString());
			String price = model.getValueAt(i, 1).toString();
			String payId = pay.getId();
			String quantity = model.getValueAt(i, 2).toString();
			DataProvider.getInstance().insert("INSERT INTO `paydetails`(`BookId`, `PaymentId`, `Quantity`, `price`) VALUES ("
			+String.format("'%s',%s,'%s','%s')", bookId,payId,quantity,price));
			
			DataProvider.getInstance().update(String.format("UPDATE `book` SET `Quantity`= %d WHERE `BookId` = '%s'",Integer.parseInt(getBookQuantity(bookId)) - Integer.parseInt(quantity),bookId));
		}
        
        // Gọi lớp `ReceiptExporter` để tạo hóa đơn Word
        ReceiptExporter generator = new ReceiptExporter(templatePath);
        generator.generateInvoice(invoiceData, outputPath);
        cleanData();

        JOptionPane.showMessageDialog(view, "Hóa đơn đã được tạo: " + outputPath, "Thành công", JOptionPane.INFORMATION_MESSAGE);
    }

    // ✅ Lấy dữ liệu từ giỏ hàng để đưa vào hóa đơn
    private Map<String, String> getTableData() {
        Map<String, String> data = new HashMap<>();
        data.put("invoice_id", "HD" + System.currentTimeMillis());
        data.put("sale_date", java.time.LocalDate.now().toString());

        JTable cartTable = view.getCartTable();
        DefaultTableModel cartModel = (DefaultTableModel) cartTable.getModel();
        double grandTotal = 0;

        for (int i = 0; i < cartModel.getRowCount(); i++) {
            data.put("book_" + (i + 1), cartModel.getValueAt(i, 0).toString());
            data.put("price_" + (i + 1), cartModel.getValueAt(i, 1).toString());
            data.put("qty_" + (i + 1), cartModel.getValueAt(i, 2).toString());
            data.put("total_" + (i + 1), cartModel.getValueAt(i, 3).toString());
            grandTotal += Double.parseDouble(cartModel.getValueAt(i, 3).toString());
        }

        data.put("grand_total", String.format("%.2f VND", grandTotal));
        return data;
    }
    
    private String getBookId(String name) {
    	try (ResultSet rs = DataProvider.getInstance().view("SELECT `BookId` FROM `book` WHERE `Title` = '"+name+"'")){
			if(rs.next())
				return rs.getString(1);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
    	return "";
    }
    
    private String getBookQuantity(String id) {
		try (ResultSet rs = DataProvider.getInstance().view("SELECT `Quantity` FROM `book` WHERE `BookId` = '"+id+"'")){
			if(rs.next())
				return rs.getString(1);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
    	return "";
    }
    
    private DefaultTableModel loadDataTable(String sql) {
		DefaultTableModel model = new DefaultTableModel();
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			String[] columns = { "Mã tác giả", "Tên tác giả" };

			if (rs == null) {
				return new DefaultTableModel(columns, 0);
			}

			ResultSetMetaData meta = rs.getMetaData();
			int columnCount = meta.getColumnCount();
			// ✅ Khởi tạo và lấy tên cột từ metadata
			String[] columnNames = new String[columnCount];
			for (int i = 1; i <= columnCount; i++) {
				columnNames[i - 1] = meta.getColumnLabel(i);
			}
			model.setColumnIdentifiers(columnNames); // Gán tên cột cho bảng

			// ✅ Lặp qua từng dòng dữ liệu và thêm vào bảng
			while (rs.next()) {
				Object[] rowData = new Object[columnCount];
				for (int i = 1; i <= columnCount; i++) {
					rowData[i - 1] = rs.getObject(i);
				}
				model.addRow(rowData);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return model;
	}
}
