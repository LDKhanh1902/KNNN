package vn.DA_KNNN.Model.DAO;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import vn.DA_KNNN.Model.DTO.DataProvider;

public class BookDAO {

    // 1. T·∫°o ƒë·ªëi t∆∞·ª£ng DAO duy nh·∫•t (Singleton Pattern)
    private static BookDAO instance;

    private final String QUERY_INSERT_BOOK = "INSERT INTO book (BookId, Title, PublisherId, CategoryId, PublicationDate, Price, AuthorId, EntryDate, PurchasePrice, Quantity) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    private final String QUERY_UPDATE_BOOK = "UPDATE book SET Title = ?, AuthorId = (SELECT AuthorId FROM author WHERE Name = ?), PublisherId = (SELECT PublisherId FROM publisher WHERE PublisherName = ?), CategoryId = (SELECT CategoryId FROM category WHERE CategoryName = ?), PublicationDate = ?, PurchasePrice = ?, Price = ?, Quantity = ?, EntryDate = ? WHERE BookId = ?";
    private final String QUERY_DELETE_BOOK = "DELETE FROM book WHERE BookId = ?";
    private final String QUERY_CHECK_BOOK_ID = "SELECT * FROM book WHERE BookId = ?";
    private final String QUERY_GET_NEW_BOOK_ID = "SELECT MAX(BookId) + 1 FROM book";
    private final String QUERY_GET_AUTHOR_ID = "SELECT AuthorId FROM author WHERE Name = ?";
    private final String QUERY_GET_CATEGORY_ID = "SELECT CategoryId FROM category WHERE CategoryName = ?";
    private final String QUERY_GET_PUBLISHER_ID = "SELECT PublisherId FROM publisher WHERE PublisherName = ?";

    private BookDAO() {}

    // 4. Ph∆∞∆°ng th·ª©c tƒ©nh tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng duy nh·∫•t BookDAO (Singleton)
    public static BookDAO getInstance() {
        if (instance == null) {
            instance = new BookDAO();  // T·∫°o ƒë·ªëi t∆∞·ª£ng n·∫øu ch∆∞a c√≥
        }
        return instance;
    }

    // Th√™m m·ªôt cu·ªën s√°ch m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
    public boolean insertBook(String bookId, String title, String categoryId, String publicationDate, String price, String authorId, String entryDate, String purchasePrice, String quantity) {
        String sql = QUERY_INSERT_BOOK;
        return executeUpdate(sql, bookId, title, categoryId, publicationDate, price, authorId, entryDate, purchasePrice, quantity);
    }

    // C·∫≠p nh·∫≠t th√¥ng tin c·ªßa cu·ªën s√°ch
    public boolean updateBook(String bookId, String title, String author, String publisher, String category, String publicationDate, String purchasePrice, String price, String quantity, String entryDate) {
        String sql = QUERY_UPDATE_BOOK;
        return executeUpdate(sql, title, author, publisher, category, publicationDate, purchasePrice, price, quantity, entryDate, bookId);
    }

    // X√≥a m·ªôt cu·ªën s√°ch theo ID
    public boolean deleteBook(String bookId) {
        String sql = QUERY_DELETE_BOOK;
        return executeUpdate(sql, bookId);
    }

    // Ki·ªÉm tra xem cu·ªën s√°ch c√≥ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu hay kh√¥ng
    public boolean checkBookIdExists(String bookId) {
        String sql = QUERY_CHECK_BOOK_ID;
        ResultSet rs = DataProvider.getInstance().view(sql, bookId);
        try {
            return rs.next();  // Tr·∫£ v·ªÅ true n·∫øu c√≥ k·∫øt qu·∫£, t·ª©c l√† s√°ch t·ªìn t·∫°i
        } catch (SQLException e) {
            e.printStackTrace();
            return false;  // N·∫øu c√≥ l·ªói x·∫£y ra, tr·∫£ v·ªÅ false
        }
    }

    // L·∫•y ID c·ªßa cu·ªën s√°ch ti·∫øp theo (d√πng cho vi·ªác t·∫°o ID t·ª± ƒë·ªông)
    public String getNewBookId() {
        String sql = QUERY_GET_NEW_BOOK_ID;
        ResultSet rs = DataProvider.getInstance().view(sql);
        try {
            if (rs.next()) {
                return rs.getString(1); // Tr·∫£ v·ªÅ ID cu·ªën s√°ch ti·∫øp theo
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "1";  // Gi√° tr·ªã m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ k·∫øt qu·∫£
    }

    // L·∫•y AuthorId t·ª´ t√™n t√°c gi·∫£
    public String getAuthorId(String authorName) {
        String sql = QUERY_GET_AUTHOR_ID;
        ResultSet rs = DataProvider.getInstance().view(sql, authorName);
        try {
            if (rs.next()) {
                return rs.getString("AuthorId"); // Tr·∫£ v·ªÅ AuthorId n·∫øu t√¨m th·∫•y
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "";  // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ chu·ªói r·ªóng
    }

    // L·∫•y CategoryId t·ª´ t√™n danh m·ª•c
    public String getCategoryId(String categoryName) {
        String sql = QUERY_GET_CATEGORY_ID;
        ResultSet rs = DataProvider.getInstance().view(sql, categoryName);
        try {
            if (rs.next()) {
                return rs.getString("CategoryId"); // Tr·∫£ v·ªÅ CategoryId n·∫øu t√¨m th·∫•y
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "";  // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ chu·ªói r·ªóng
    }

    // L·∫•y PublisherId t·ª´ t√™n nh√† xu·∫•t b·∫£n
    public String getPublisherId(String publisherName) {
        String sql = QUERY_GET_PUBLISHER_ID;
        ResultSet rs = DataProvider.getInstance().view(sql, publisherName);
        try {
            if (rs.next()) {
                return rs.getString("PublisherId"); // Tr·∫£ v·ªÅ PublisherId n·∫øu t√¨m th·∫•y
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "";  // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ chu·ªói r·ªóng
    }

    // Ph∆∞∆°ng th·ª©c t√¨m ki·∫øm th√¥ng qua t·ª´ kh√≥a
    public String getQuerySearch(String query, String keyword) {
        boolean isNumeric = keyword.matches("\\d+"); // Ki·ªÉm tra xem id ch·ªâ ch·ª©a s·ªë hay kh√¥ng
        String sql = query;

        if (isNumeric) {
            sql += " WHERE BookId = ? OR Title LIKE ?";
        } else {
            sql += " WHERE Title LIKE ?";
        }

        return sql;
    }

    // H√†m d√πng chung ƒë·ªÉ th·ª±c thi c√°c c√¢u l·ªánh SQL c·∫≠p nh·∫≠t (INSERT, UPDATE, DELETE)
    private boolean executeUpdate(String sql, Object... params) {
        try (PreparedStatement pstmt = DataProvider.getInstance().getConnection().prepareStatement(sql)) {
            // Thi·∫øt l·∫≠p c√°c tham s·ªë v√†o PreparedStatement
            for (int i = 0; i < params.length; i++) {
                pstmt.setObject(i + 1, params[i]);
            }
            int result = pstmt.executeUpdate();
            return result > 0;  // Tr·∫£ v·ªÅ true n·∫øu c√≥ √≠t nh·∫•t m·ªôt b·∫£n ghi b·ªã thay ƒë·ªïi
        } catch (SQLException e) {
            e.printStackTrace();
            return false;  // Tr·∫£ v·ªÅ false n·∫øu c√≥ l·ªói x·∫£y ra
        }
    }

    /** ‚úÖ Load danh s√°ch th·ªÉ lo·∫°i */
    public String[] getCategories() {
        return fetchColumnData("SELECT CategoryName FROM category", "CategoryName");
    }

    /** ‚úÖ Load danh s√°ch nh√† xu·∫•t b·∫£n */
    public String[] getPublishers() {
        return fetchColumnData("SELECT PublisherName FROM publisher", "PublisherName");
    }

    /** üîπ H√†m d√πng chung ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ m·ªôt c·ªôt */
    private String[] fetchColumnData(String sql, String columnName) {
        List<String> dataList = new ArrayList<>();
        try (ResultSet rs = DataProvider.getInstance().view(sql)) {
            while (rs.next()) {
                dataList.add(rs.getString(columnName));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dataList.toArray(new String[0]);
    }
}
