package vn.DA_KNNN.Controller;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import vn.DA_KNNN.Components.AppHelper;
import vn.DA_KNNN.Model.DataProvider;
import vn.DA_KNNN.View.CategoryView;

public class CategoryController {
	private CategoryView view;
	private String query = "SELECT `CategoryId` as 'M√£ th·ªÉ lo·∫°i', `CategoryName` as 'T√™n th·ªÉ lo·∫°i', `Description` as 'M√¥ t·∫£', (SELECT COUNT(*) FROM book WHERE book.CategoryId = category.CategoryId) AS 'S·ªë t√°c ph·∫©m' FROM category";

	public CategoryController(CategoryView _view) {
		view = _view;
		setupEventListeners();
		loadData(query);
	}

	private void loadData(String sql) {
		DefaultTableModel model = AppHelper.loadDataTable(sql);
		tableRowClick(view.getCategoryTable(), model);
		view.getCategoryTable().setModel(model);
	}

	private void setupEventListeners() {
		view.getBtnAdd().addActionListener(e -> addCategory());
		view.getBtnEdit().addActionListener(e -> editCategory());
		view.getBtnDelete().addActionListener(e -> deleteCategory());
		view.getBtnCreateId().addActionListener(e -> createCategoryId());
		view.getSearchPanel().getBtnSearch().addActionListener(e -> findCategoryData());
		view.getSearchPanel().getBtnRefresh().addActionListener(e->{
			clearFields();
			view.getSearchPanel().getTxtSearch().setText("");
		});
	}

	private void findCategoryData() {
		String id = view.getSearchPanel().getTxtSearch().getText();
		String name = view.getSearchPanel().getTxtSearch().getText();

		boolean isNumeric = id.matches("\\d+"); // Ki·ªÉm tra xem id ch·ªâ ch·ª©a s·ªë hay kh√¥ng

		String sql;
		if (isNumeric) {
			sql = query + " WHERE CategoryId = " + id + " OR CategoryName LIKE '%" + name + "%'";
		} else {
			sql = query + " WHERE CategoryName LIKE '%" + name + "%'";
		}

		loadData(sql);
	}

	/** üîπ H√†m d√πng chung ƒë·ªÉ l·∫•y gi√° tr·ªã duy nh·∫•t */
	private String fetchSingleValue(String sql, String columnName) {
		try (ResultSet rs = DataProvider.getInstance().view(sql)) {
			if (rs.next()) {
				return rs.getString(columnName);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return "";
	}

	private void createCategoryId() {
		String nextId = fetchSingleValue("SELECT MAX(CategoryId) + 1 FROM category", "MAX(CategoryId) + 1");
		view.getTxtCategoryId().setText(nextId);
	}

	private void deleteCategory() {
		try {
			// L·∫•y CategoryId t·ª´ TextField
			String categoryId = view.getTxtCategoryId().getText().trim();

			if (categoryId.isEmpty()) {
				JOptionPane.showMessageDialog(view, "Vui l√≤ng nh·∫≠p m√£ th·ªÉ lo·∫°i c·∫ßn x√≥a!", "L·ªói",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			// X√°c nh·∫≠n x√≥a th·ªÉ lo·∫°i
			int confirm = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·ªÉ lo·∫°i n√†y?", "X√°c nh·∫≠n x√≥a",
					JOptionPane.YES_NO_OPTION);
			if (confirm != JOptionPane.YES_OPTION) {
				return;
			}

			// C√¢u l·ªánh SQL x√≥a th·ªÉ lo·∫°i
			String sql = String.format("DELETE FROM category WHERE CategoryId = '%s'", categoryId);

			if (DataProvider.getInstance().delete(sql)) {
				JOptionPane.showMessageDialog(view, "X√≥a th·ªÉ lo·∫°i th√†nh c√¥ng!", "Th√¥ng b√°o",
						JOptionPane.INFORMATION_MESSAGE);
				loadData(query); // C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu sau khi x√≥a
				clearFields(); // X√≥a c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
			} else {
				JOptionPane.showMessageDialog(view, "X√≥a th·ªÉ lo·∫°i th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
			}
		} catch (Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(view, "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void editCategory() {
		try {
			// L·∫•y d·ªØ li·ªáu t·ª´ giao di·ªán
			String categoryId = view.getTxtCategoryId().getText().trim();
			String categoryName = view.getTxtCategoryName().getText().trim();
			String categoryDescription = view.getTxtCategoryDescription().getText().trim();

			if (categoryId.isEmpty() || categoryName.isEmpty() || categoryDescription.isEmpty()) {
				JOptionPane.showMessageDialog(view, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", "L·ªói",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			// X√°c nh·∫≠n c·∫≠p nh·∫≠t th√¥ng tin th·ªÉ lo·∫°i
			int confirm = JOptionPane.showConfirmDialog(view, "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin th·ªÉ lo·∫°i n√†y?",
					"X√°c nh·∫≠n c·∫≠p nh·∫≠t", JOptionPane.YES_NO_OPTION);
			if (confirm != JOptionPane.YES_OPTION) {
				return;
			}

			// C√¢u l·ªánh SQL c·∫≠p nh·∫≠t th·ªÉ lo·∫°i
			String sql = String.format(
					"UPDATE category SET CategoryName = '%s', Description = '%s' WHERE CategoryId = '%s'", categoryName,
					categoryDescription, categoryId);

			if (DataProvider.getInstance().update(sql)) {
				JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t th·ªÉ lo·∫°i th√†nh c√¥ng!", "Th√¥ng b√°o",
						JOptionPane.INFORMATION_MESSAGE);
				loadData(query); // C·∫≠p nh·∫≠t l·∫°i b·∫£ng sau khi s·ª≠a
				clearFields(); // X√≥a d·ªØ li·ªáu nh·∫≠p sau khi s·ª≠a
			} else {
				JOptionPane.showMessageDialog(view, "C·∫≠p nh·∫≠t th·ªÉ lo·∫°i th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
			}
		} catch (Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(view, "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void addCategory() {
		try {
			// L·∫•y d·ªØ li·ªáu t·ª´ giao di·ªán
			String categoryId = view.getTxtCategoryId().getText().trim();
			String categoryName = view.getTxtCategoryName().getText().trim();
			String categoryDescription = view.getTxtCategoryDescription().getText().trim();

			if (categoryId.isEmpty() || categoryName.isEmpty() || categoryDescription.isEmpty()) {
				JOptionPane.showMessageDialog(view, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!", "L·ªói",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			// Ki·ªÉm tra xem `CategoryId` ƒë√£ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu ch∆∞a
			String existingCategory = fetchSingleValue(
					"SELECT CategoryId FROM category WHERE CategoryId = '" + categoryId + "'", "CategoryId");
			if (!existingCategory.isEmpty()) {
				JOptionPane.showMessageDialog(view, "M√£ th·ªÉ lo·∫°i ƒë√£ t·ªìn t·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
				return;
			}

			// C√¢u l·ªánh SQL th√™m th·ªÉ lo·∫°i m·ªõi
			String sql = String.format(
					"INSERT INTO category (CategoryId, CategoryName, Description) VALUES ('%s', '%s', '%s')",
					categoryId, categoryName, categoryDescription);

			if (DataProvider.getInstance().insert(sql)) {
				JOptionPane.showMessageDialog(view, "Th√™m th·ªÉ lo·∫°i th√†nh c√¥ng!", "Th√¥ng b√°o",
						JOptionPane.INFORMATION_MESSAGE);
				loadData(query); // C·∫≠p nh·∫≠t l·∫°i b·∫£ng sau khi th√™m
				clearFields(); // X√≥a d·ªØ li·ªáu nh·∫≠p sau khi th√™m
			} else {
				JOptionPane.showMessageDialog(view, "Th√™m th·ªÉ lo·∫°i th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
			}
		} catch (Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(view, "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
		}
	}

	private void tableRowClick(JTable table, DefaultTableModel model) {
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int selectedRow = table.getSelectedRow();
				if (selectedRow != -1) { // ƒê·∫£m b·∫£o c√≥ h√†ng ƒë∆∞·ª£c ch·ªçn
					view.getTxtCategoryId().setText(model.getValueAt(selectedRow, 0).toString());
					view.getTxtCategoryName().setText(model.getValueAt(selectedRow, 1).toString());
					view.getTxtCategoryDescription().setText(model.getValueAt(selectedRow, 2).toString());
				}
			}
		});
	}

	private void clearFields() {
		view.getTxtCategoryId().setText("");
		view.getTxtCategoryName().setText("");
		view.getTxtCategoryDescription().setText("");
	}
}
